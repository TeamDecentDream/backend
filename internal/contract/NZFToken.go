// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NZFToken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NZFTokenMetaData contains all meta data concerning the NZFToken contract.
var NZFTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeveloperMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvestorMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEVELOPER_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_LIMIT_PER_INVESTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyBackTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profitPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// NZFTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use NZFTokenMetaData.ABI instead.
var NZFTokenABI = NZFTokenMetaData.ABI

// NZFTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NZFTokenMetaData.Bin instead.
var NZFTokenBin = NZFTokenMetaData.Bin

// DeployNZFToken deploys a new Ethereum contract, binding an instance of NZFToken to it.
func DeployNZFToken(auth *bind.TransactOpts, backend bind.ContractBackend, _developerWallet common.Address, _USDTAddress common.Address) (common.Address, *types.Transaction, *NZFToken, error) {
	parsed, err := NZFTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NZFTokenBin), backend, _developerWallet, _USDTAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NZFToken{NZFTokenCaller: NZFTokenCaller{contract: contract}, NZFTokenTransactor: NZFTokenTransactor{contract: contract}, NZFTokenFilterer: NZFTokenFilterer{contract: contract}}, nil
}

// NZFToken is an auto generated Go binding around an Ethereum contract.
type NZFToken struct {
	NZFTokenCaller     // Read-only binding to the contract
	NZFTokenTransactor // Write-only binding to the contract
	NZFTokenFilterer   // Log filterer for contract events
}

// NZFTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type NZFTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NZFTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NZFTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NZFTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NZFTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NZFTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NZFTokenSession struct {
	Contract     *NZFToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NZFTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NZFTokenCallerSession struct {
	Contract *NZFTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// NZFTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NZFTokenTransactorSession struct {
	Contract     *NZFTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// NZFTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type NZFTokenRaw struct {
	Contract *NZFToken // Generic contract binding to access the raw methods on
}

// NZFTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NZFTokenCallerRaw struct {
	Contract *NZFTokenCaller // Generic read-only contract binding to access the raw methods on
}

// NZFTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NZFTokenTransactorRaw struct {
	Contract *NZFTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNZFToken creates a new instance of NZFToken, bound to a specific deployed contract.
func NewNZFToken(address common.Address, backend bind.ContractBackend) (*NZFToken, error) {
	contract, err := bindNZFToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NZFToken{NZFTokenCaller: NZFTokenCaller{contract: contract}, NZFTokenTransactor: NZFTokenTransactor{contract: contract}, NZFTokenFilterer: NZFTokenFilterer{contract: contract}}, nil
}

// NewNZFTokenCaller creates a new read-only instance of NZFToken, bound to a specific deployed contract.
func NewNZFTokenCaller(address common.Address, caller bind.ContractCaller) (*NZFTokenCaller, error) {
	contract, err := bindNZFToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NZFTokenCaller{contract: contract}, nil
}

// NewNZFTokenTransactor creates a new write-only instance of NZFToken, bound to a specific deployed contract.
func NewNZFTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*NZFTokenTransactor, error) {
	contract, err := bindNZFToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NZFTokenTransactor{contract: contract}, nil
}

// NewNZFTokenFilterer creates a new log filterer instance of NZFToken, bound to a specific deployed contract.
func NewNZFTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*NZFTokenFilterer, error) {
	contract, err := bindNZFToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NZFTokenFilterer{contract: contract}, nil
}

// bindNZFToken binds a generic wrapper to an already deployed contract.
func bindNZFToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NZFTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NZFToken *NZFTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NZFToken.Contract.NZFTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NZFToken *NZFTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NZFToken.Contract.NZFTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NZFToken *NZFTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NZFToken.Contract.NZFTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NZFToken *NZFTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NZFToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NZFToken *NZFTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NZFToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NZFToken *NZFTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NZFToken.Contract.contract.Transact(opts, method, params...)
}

// DEVELOPERSUPPLY is a free data retrieval call binding the contract method 0x4fe72439.
//
// Solidity: function DEVELOPER_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCaller) DEVELOPERSUPPLY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "DEVELOPER_SUPPLY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEVELOPERSUPPLY is a free data retrieval call binding the contract method 0x4fe72439.
//
// Solidity: function DEVELOPER_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenSession) DEVELOPERSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.DEVELOPERSUPPLY(&_NZFToken.CallOpts)
}

// DEVELOPERSUPPLY is a free data retrieval call binding the contract method 0x4fe72439.
//
// Solidity: function DEVELOPER_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) DEVELOPERSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.DEVELOPERSUPPLY(&_NZFToken.CallOpts)
}

// INVESTORSUPPLY is a free data retrieval call binding the contract method 0x329927a7.
//
// Solidity: function INVESTOR_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCaller) INVESTORSUPPLY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "INVESTOR_SUPPLY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// INVESTORSUPPLY is a free data retrieval call binding the contract method 0x329927a7.
//
// Solidity: function INVESTOR_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenSession) INVESTORSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.INVESTORSUPPLY(&_NZFToken.CallOpts)
}

// INVESTORSUPPLY is a free data retrieval call binding the contract method 0x329927a7.
//
// Solidity: function INVESTOR_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) INVESTORSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.INVESTORSUPPLY(&_NZFToken.CallOpts)
}

// MINTLIMITPERINVESTOR is a free data retrieval call binding the contract method 0x039600d2.
//
// Solidity: function MINT_LIMIT_PER_INVESTOR() view returns(uint256)
func (_NZFToken *NZFTokenCaller) MINTLIMITPERINVESTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "MINT_LIMIT_PER_INVESTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTLIMITPERINVESTOR is a free data retrieval call binding the contract method 0x039600d2.
//
// Solidity: function MINT_LIMIT_PER_INVESTOR() view returns(uint256)
func (_NZFToken *NZFTokenSession) MINTLIMITPERINVESTOR() (*big.Int, error) {
	return _NZFToken.Contract.MINTLIMITPERINVESTOR(&_NZFToken.CallOpts)
}

// MINTLIMITPERINVESTOR is a free data retrieval call binding the contract method 0x039600d2.
//
// Solidity: function MINT_LIMIT_PER_INVESTOR() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) MINTLIMITPERINVESTOR() (*big.Int, error) {
	return _NZFToken.Contract.MINTLIMITPERINVESTOR(&_NZFToken.CallOpts)
}

// TOTALSUPPLY is a free data retrieval call binding the contract method 0x902d55a5.
//
// Solidity: function TOTAL_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCaller) TOTALSUPPLY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "TOTAL_SUPPLY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TOTALSUPPLY is a free data retrieval call binding the contract method 0x902d55a5.
//
// Solidity: function TOTAL_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenSession) TOTALSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.TOTALSUPPLY(&_NZFToken.CallOpts)
}

// TOTALSUPPLY is a free data retrieval call binding the contract method 0x902d55a5.
//
// Solidity: function TOTAL_SUPPLY() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) TOTALSUPPLY() (*big.Int, error) {
	return _NZFToken.Contract.TOTALSUPPLY(&_NZFToken.CallOpts)
}

// USDTAddress is a free data retrieval call binding the contract method 0xff920c74.
//
// Solidity: function USDTAddress() view returns(address)
func (_NZFToken *NZFTokenCaller) USDTAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "USDTAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// USDTAddress is a free data retrieval call binding the contract method 0xff920c74.
//
// Solidity: function USDTAddress() view returns(address)
func (_NZFToken *NZFTokenSession) USDTAddress() (common.Address, error) {
	return _NZFToken.Contract.USDTAddress(&_NZFToken.CallOpts)
}

// USDTAddress is a free data retrieval call binding the contract method 0xff920c74.
//
// Solidity: function USDTAddress() view returns(address)
func (_NZFToken *NZFTokenCallerSession) USDTAddress() (common.Address, error) {
	return _NZFToken.Contract.USDTAddress(&_NZFToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_NZFToken *NZFTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_NZFToken *NZFTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _NZFToken.Contract.Allowance(&_NZFToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _NZFToken.Contract.Allowance(&_NZFToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_NZFToken *NZFTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_NZFToken *NZFTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _NZFToken.Contract.BalanceOf(&_NZFToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _NZFToken.Contract.BalanceOf(&_NZFToken.CallOpts, account)
}

// BuyBackTimer is a free data retrieval call binding the contract method 0x1239d55a.
//
// Solidity: function buyBackTimer(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCaller) BuyBackTimer(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "buyBackTimer", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BuyBackTimer is a free data retrieval call binding the contract method 0x1239d55a.
//
// Solidity: function buyBackTimer(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenSession) BuyBackTimer(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.BuyBackTimer(&_NZFToken.CallOpts, arg0)
}

// BuyBackTimer is a free data retrieval call binding the contract method 0x1239d55a.
//
// Solidity: function buyBackTimer(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) BuyBackTimer(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.BuyBackTimer(&_NZFToken.CallOpts, arg0)
}

// CurrentSupply is a free data retrieval call binding the contract method 0x771282f6.
//
// Solidity: function currentSupply() view returns(uint256)
func (_NZFToken *NZFTokenCaller) CurrentSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "currentSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentSupply is a free data retrieval call binding the contract method 0x771282f6.
//
// Solidity: function currentSupply() view returns(uint256)
func (_NZFToken *NZFTokenSession) CurrentSupply() (*big.Int, error) {
	return _NZFToken.Contract.CurrentSupply(&_NZFToken.CallOpts)
}

// CurrentSupply is a free data retrieval call binding the contract method 0x771282f6.
//
// Solidity: function currentSupply() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) CurrentSupply() (*big.Int, error) {
	return _NZFToken.Contract.CurrentSupply(&_NZFToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_NZFToken *NZFTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_NZFToken *NZFTokenSession) Decimals() (uint8, error) {
	return _NZFToken.Contract.Decimals(&_NZFToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_NZFToken *NZFTokenCallerSession) Decimals() (uint8, error) {
	return _NZFToken.Contract.Decimals(&_NZFToken.CallOpts)
}

// DeveloperWallet is a free data retrieval call binding the contract method 0x185870f9.
//
// Solidity: function developerWallet() view returns(address)
func (_NZFToken *NZFTokenCaller) DeveloperWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "developerWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DeveloperWallet is a free data retrieval call binding the contract method 0x185870f9.
//
// Solidity: function developerWallet() view returns(address)
func (_NZFToken *NZFTokenSession) DeveloperWallet() (common.Address, error) {
	return _NZFToken.Contract.DeveloperWallet(&_NZFToken.CallOpts)
}

// DeveloperWallet is a free data retrieval call binding the contract method 0x185870f9.
//
// Solidity: function developerWallet() view returns(address)
func (_NZFToken *NZFTokenCallerSession) DeveloperWallet() (common.Address, error) {
	return _NZFToken.Contract.DeveloperWallet(&_NZFToken.CallOpts)
}

// IndexSet is a free data retrieval call binding the contract method 0x66c04202.
//
// Solidity: function indexSet(uint256 ) view returns(bool)
func (_NZFToken *NZFTokenCaller) IndexSet(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "indexSet", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexSet is a free data retrieval call binding the contract method 0x66c04202.
//
// Solidity: function indexSet(uint256 ) view returns(bool)
func (_NZFToken *NZFTokenSession) IndexSet(arg0 *big.Int) (bool, error) {
	return _NZFToken.Contract.IndexSet(&_NZFToken.CallOpts, arg0)
}

// IndexSet is a free data retrieval call binding the contract method 0x66c04202.
//
// Solidity: function indexSet(uint256 ) view returns(bool)
func (_NZFToken *NZFTokenCallerSession) IndexSet(arg0 *big.Int) (bool, error) {
	return _NZFToken.Contract.IndexSet(&_NZFToken.CallOpts, arg0)
}

// MintedTokens is a free data retrieval call binding the contract method 0x7241dfa0.
//
// Solidity: function mintedTokens(address ) view returns(uint256)
func (_NZFToken *NZFTokenCaller) MintedTokens(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "mintedTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintedTokens is a free data retrieval call binding the contract method 0x7241dfa0.
//
// Solidity: function mintedTokens(address ) view returns(uint256)
func (_NZFToken *NZFTokenSession) MintedTokens(arg0 common.Address) (*big.Int, error) {
	return _NZFToken.Contract.MintedTokens(&_NZFToken.CallOpts, arg0)
}

// MintedTokens is a free data retrieval call binding the contract method 0x7241dfa0.
//
// Solidity: function mintedTokens(address ) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) MintedTokens(arg0 common.Address) (*big.Int, error) {
	return _NZFToken.Contract.MintedTokens(&_NZFToken.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NZFToken *NZFTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NZFToken *NZFTokenSession) Name() (string, error) {
	return _NZFToken.Contract.Name(&_NZFToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NZFToken *NZFTokenCallerSession) Name() (string, error) {
	return _NZFToken.Contract.Name(&_NZFToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NZFToken *NZFTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NZFToken *NZFTokenSession) Owner() (common.Address, error) {
	return _NZFToken.Contract.Owner(&_NZFToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NZFToken *NZFTokenCallerSession) Owner() (common.Address, error) {
	return _NZFToken.Contract.Owner(&_NZFToken.CallOpts)
}

// ProfitPerDay is a free data retrieval call binding the contract method 0x34a07c87.
//
// Solidity: function profitPerDay(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCaller) ProfitPerDay(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "profitPerDay", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProfitPerDay is a free data retrieval call binding the contract method 0x34a07c87.
//
// Solidity: function profitPerDay(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenSession) ProfitPerDay(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.ProfitPerDay(&_NZFToken.CallOpts, arg0)
}

// ProfitPerDay is a free data retrieval call binding the contract method 0x34a07c87.
//
// Solidity: function profitPerDay(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) ProfitPerDay(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.ProfitPerDay(&_NZFToken.CallOpts, arg0)
}

// RemainingProfit is a free data retrieval call binding the contract method 0x88c9e17a.
//
// Solidity: function remainingProfit(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCaller) RemainingProfit(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "remainingProfit", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingProfit is a free data retrieval call binding the contract method 0x88c9e17a.
//
// Solidity: function remainingProfit(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenSession) RemainingProfit(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.RemainingProfit(&_NZFToken.CallOpts, arg0)
}

// RemainingProfit is a free data retrieval call binding the contract method 0x88c9e17a.
//
// Solidity: function remainingProfit(uint256 ) view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) RemainingProfit(arg0 *big.Int) (*big.Int, error) {
	return _NZFToken.Contract.RemainingProfit(&_NZFToken.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NZFToken *NZFTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NZFToken *NZFTokenSession) Symbol() (string, error) {
	return _NZFToken.Contract.Symbol(&_NZFToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NZFToken *NZFTokenCallerSession) Symbol() (string, error) {
	return _NZFToken.Contract.Symbol(&_NZFToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NZFToken *NZFTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NZFToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NZFToken *NZFTokenSession) TotalSupply() (*big.Int, error) {
	return _NZFToken.Contract.TotalSupply(&_NZFToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NZFToken *NZFTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _NZFToken.Contract.TotalSupply(&_NZFToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_NZFToken *NZFTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.Approve(&_NZFToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.Approve(&_NZFToken.TransactOpts, spender, value)
}

// BuyBack is a paid mutator transaction binding the contract method 0xd1b8df22.
//
// Solidity: function buyBack(address pool, uint256 index) returns()
func (_NZFToken *NZFTokenTransactor) BuyBack(opts *bind.TransactOpts, pool common.Address, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "buyBack", pool, index)
}

// BuyBack is a paid mutator transaction binding the contract method 0xd1b8df22.
//
// Solidity: function buyBack(address pool, uint256 index) returns()
func (_NZFToken *NZFTokenSession) BuyBack(pool common.Address, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.BuyBack(&_NZFToken.TransactOpts, pool, index)
}

// BuyBack is a paid mutator transaction binding the contract method 0xd1b8df22.
//
// Solidity: function buyBack(address pool, uint256 index) returns()
func (_NZFToken *NZFTokenTransactorSession) BuyBack(pool common.Address, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.BuyBack(&_NZFToken.TransactOpts, pool, index)
}

// MintInvestor is a paid mutator transaction binding the contract method 0xe5a7eb75.
//
// Solidity: function mintInvestor(uint256 amount) returns()
func (_NZFToken *NZFTokenTransactor) MintInvestor(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "mintInvestor", amount)
}

// MintInvestor is a paid mutator transaction binding the contract method 0xe5a7eb75.
//
// Solidity: function mintInvestor(uint256 amount) returns()
func (_NZFToken *NZFTokenSession) MintInvestor(amount *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.MintInvestor(&_NZFToken.TransactOpts, amount)
}

// MintInvestor is a paid mutator transaction binding the contract method 0xe5a7eb75.
//
// Solidity: function mintInvestor(uint256 amount) returns()
func (_NZFToken *NZFTokenTransactorSession) MintInvestor(amount *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.MintInvestor(&_NZFToken.TransactOpts, amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NZFToken *NZFTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NZFToken *NZFTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _NZFToken.Contract.RenounceOwnership(&_NZFToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NZFToken *NZFTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NZFToken.Contract.RenounceOwnership(&_NZFToken.TransactOpts)
}

// SetProfit is a paid mutator transaction binding the contract method 0xab137cc8.
//
// Solidity: function setProfit(uint256 amount, uint256 index) returns()
func (_NZFToken *NZFTokenTransactor) SetProfit(opts *bind.TransactOpts, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "setProfit", amount, index)
}

// SetProfit is a paid mutator transaction binding the contract method 0xab137cc8.
//
// Solidity: function setProfit(uint256 amount, uint256 index) returns()
func (_NZFToken *NZFTokenSession) SetProfit(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.SetProfit(&_NZFToken.TransactOpts, amount, index)
}

// SetProfit is a paid mutator transaction binding the contract method 0xab137cc8.
//
// Solidity: function setProfit(uint256 amount, uint256 index) returns()
func (_NZFToken *NZFTokenTransactorSession) SetProfit(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.SetProfit(&_NZFToken.TransactOpts, amount, index)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.Transfer(&_NZFToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.Transfer(&_NZFToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.TransferFrom(&_NZFToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_NZFToken *NZFTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _NZFToken.Contract.TransferFrom(&_NZFToken.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NZFToken *NZFTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NZFToken *NZFTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NZFToken.Contract.TransferOwnership(&_NZFToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NZFToken *NZFTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NZFToken.Contract.TransferOwnership(&_NZFToken.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_NZFToken *NZFTokenTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NZFToken.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_NZFToken *NZFTokenSession) Withdraw() (*types.Transaction, error) {
	return _NZFToken.Contract.Withdraw(&_NZFToken.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_NZFToken *NZFTokenTransactorSession) Withdraw() (*types.Transaction, error) {
	return _NZFToken.Contract.Withdraw(&_NZFToken.TransactOpts)
}

// NZFTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the NZFToken contract.
type NZFTokenApprovalIterator struct {
	Event *NZFTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NZFTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NZFTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NZFTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NZFTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NZFTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NZFTokenApproval represents a Approval event raised by the NZFToken contract.
type NZFTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_NZFToken *NZFTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NZFTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NZFToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NZFTokenApprovalIterator{contract: _NZFToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_NZFToken *NZFTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NZFTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NZFToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NZFTokenApproval)
				if err := _NZFToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_NZFToken *NZFTokenFilterer) ParseApproval(log types.Log) (*NZFTokenApproval, error) {
	event := new(NZFTokenApproval)
	if err := _NZFToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NZFTokenDeveloperMintIterator is returned from FilterDeveloperMint and is used to iterate over the raw logs and unpacked data for DeveloperMint events raised by the NZFToken contract.
type NZFTokenDeveloperMintIterator struct {
	Event *NZFTokenDeveloperMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NZFTokenDeveloperMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NZFTokenDeveloperMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NZFTokenDeveloperMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NZFTokenDeveloperMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NZFTokenDeveloperMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NZFTokenDeveloperMint represents a DeveloperMint event raised by the NZFToken contract.
type NZFTokenDeveloperMint struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeveloperMint is a free log retrieval operation binding the contract event 0x673ad46f4a30443e6b6ee27eeb47908c02e5daecb8fbe6a3247f634dd2cde3c1.
//
// Solidity: event DeveloperMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) FilterDeveloperMint(opts *bind.FilterOpts, to []common.Address) (*NZFTokenDeveloperMintIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.FilterLogs(opts, "DeveloperMint", toRule)
	if err != nil {
		return nil, err
	}
	return &NZFTokenDeveloperMintIterator{contract: _NZFToken.contract, event: "DeveloperMint", logs: logs, sub: sub}, nil
}

// WatchDeveloperMint is a free log subscription operation binding the contract event 0x673ad46f4a30443e6b6ee27eeb47908c02e5daecb8fbe6a3247f634dd2cde3c1.
//
// Solidity: event DeveloperMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) WatchDeveloperMint(opts *bind.WatchOpts, sink chan<- *NZFTokenDeveloperMint, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.WatchLogs(opts, "DeveloperMint", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NZFTokenDeveloperMint)
				if err := _NZFToken.contract.UnpackLog(event, "DeveloperMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeveloperMint is a log parse operation binding the contract event 0x673ad46f4a30443e6b6ee27eeb47908c02e5daecb8fbe6a3247f634dd2cde3c1.
//
// Solidity: event DeveloperMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) ParseDeveloperMint(log types.Log) (*NZFTokenDeveloperMint, error) {
	event := new(NZFTokenDeveloperMint)
	if err := _NZFToken.contract.UnpackLog(event, "DeveloperMint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NZFTokenInvestorMintIterator is returned from FilterInvestorMint and is used to iterate over the raw logs and unpacked data for InvestorMint events raised by the NZFToken contract.
type NZFTokenInvestorMintIterator struct {
	Event *NZFTokenInvestorMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NZFTokenInvestorMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NZFTokenInvestorMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NZFTokenInvestorMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NZFTokenInvestorMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NZFTokenInvestorMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NZFTokenInvestorMint represents a InvestorMint event raised by the NZFToken contract.
type NZFTokenInvestorMint struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInvestorMint is a free log retrieval operation binding the contract event 0x8936d06b61ad023525017d83cb2cec9d7a688f71eb45e3ed02a9ba311c17b51b.
//
// Solidity: event InvestorMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) FilterInvestorMint(opts *bind.FilterOpts, to []common.Address) (*NZFTokenInvestorMintIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.FilterLogs(opts, "InvestorMint", toRule)
	if err != nil {
		return nil, err
	}
	return &NZFTokenInvestorMintIterator{contract: _NZFToken.contract, event: "InvestorMint", logs: logs, sub: sub}, nil
}

// WatchInvestorMint is a free log subscription operation binding the contract event 0x8936d06b61ad023525017d83cb2cec9d7a688f71eb45e3ed02a9ba311c17b51b.
//
// Solidity: event InvestorMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) WatchInvestorMint(opts *bind.WatchOpts, sink chan<- *NZFTokenInvestorMint, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.WatchLogs(opts, "InvestorMint", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NZFTokenInvestorMint)
				if err := _NZFToken.contract.UnpackLog(event, "InvestorMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvestorMint is a log parse operation binding the contract event 0x8936d06b61ad023525017d83cb2cec9d7a688f71eb45e3ed02a9ba311c17b51b.
//
// Solidity: event InvestorMint(address indexed to, uint256 amount)
func (_NZFToken *NZFTokenFilterer) ParseInvestorMint(log types.Log) (*NZFTokenInvestorMint, error) {
	event := new(NZFTokenInvestorMint)
	if err := _NZFToken.contract.UnpackLog(event, "InvestorMint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NZFTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NZFToken contract.
type NZFTokenOwnershipTransferredIterator struct {
	Event *NZFTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NZFTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NZFTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NZFTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NZFTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NZFTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NZFTokenOwnershipTransferred represents a OwnershipTransferred event raised by the NZFToken contract.
type NZFTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NZFToken *NZFTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NZFTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NZFToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NZFTokenOwnershipTransferredIterator{contract: _NZFToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NZFToken *NZFTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NZFTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NZFToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NZFTokenOwnershipTransferred)
				if err := _NZFToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NZFToken *NZFTokenFilterer) ParseOwnershipTransferred(log types.Log) (*NZFTokenOwnershipTransferred, error) {
	event := new(NZFTokenOwnershipTransferred)
	if err := _NZFToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NZFTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the NZFToken contract.
type NZFTokenTransferIterator struct {
	Event *NZFTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NZFTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NZFTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NZFTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NZFTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NZFTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NZFTokenTransfer represents a Transfer event raised by the NZFToken contract.
type NZFTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_NZFToken *NZFTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*NZFTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &NZFTokenTransferIterator{contract: _NZFToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_NZFToken *NZFTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NZFTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NZFToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NZFTokenTransfer)
				if err := _NZFToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_NZFToken *NZFTokenFilterer) ParseTransfer(log types.Log) (*NZFTokenTransfer, error) {
	event := new(NZFTokenTransfer)
	if err := _NZFToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
